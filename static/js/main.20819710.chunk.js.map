{"version":3,"sources":["utils/DataAreaContext.js","components/DataBody/index.js","components/DataTable/index.js","components/Search/index.js","components/Nav/index.js","utils/API.js","components/DataArea/index.js","components/Main/index.js","components/Wrapper/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["DataAreaContext","React","createContext","DataBody","context","useContext","undefined","developerState","filterUsers","name","map","login","picture","phone","email","dob","key","uuid","data-th","src","medium","alt","first","last","href","date","dateArray","split","year","join","formatDate","DataTable","className","id","headings","width","style","onClick","handleSort","toLowerCase","Search","type","placeholder","aria-label","onChange","e","handleSearch","Nav","axios","get","DataArea","useState","users","order","setDeveloperState","useEffect","API","then","results","data","Provider","value","event","filter","target","filterList","item","indexOf","heading","userSort","sort","x","y","localeCompare","length","Main","Wrapper","children","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.20819710.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst DataAreaContext = React.createContext({\r\n    \r\n});\r\n\r\nexport default DataAreaContext;\r\n","import React, { useContext } from 'react';\r\nimport DataAreaContext from '../../utils/DataAreaContext'\r\n\r\nconst DataBody = () => {\r\n    const context = useContext(DataAreaContext);\r\n\r\n    function formatDate(date){\r\n        const dateArray = date.split('-');\r\n        const year = dateArray[0];\r\n        const month = dateArray[1];\r\n        const dayArray = dateArray[2].split('T');\r\n        const day = dayArray[0];\r\n        const formattedDate = [month, day, year].join('-');\r\n        return formattedDate;\r\n    }\r\n    return (\r\n      <tbody>\r\n        {context.developerState.filterUsers[0] !== undefined &&\r\n        context.developerState.filterUsers[0].name !== undefined ? (\r\n          context.developerState.filterUsers.map(\r\n            ({ login, name, picture, phone, email, dob }) => {\r\n              return (\r\n                <tr key={login.uuid}>\r\n                  <td data-th=\"Image\">\r\n                    <img\r\n                      src={picture.medium}\r\n                      alt={name.first + \"\" + name.last}\r\n                    />\r\n                  </td>\r\n                  <td data-th=\"Name\">\r\n                    {name.first} {name.last}\r\n                  </td>\r\n                  <td data-th=\"Phone\">{phone}</td>\r\n                  <td data-th=\"Email\">\r\n                    <a href={\"Email:\" + email}>\r\n                      {email}\r\n                    </a>\r\n                  </td>\r\n                  <td data-th=\"DOB\">{formatDate(dob.date)}</td>\r\n                </tr>\r\n              );\r\n            }\r\n          )\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </tbody>\r\n    );\r\n}\r\n\r\nexport default DataBody;","import React, { useContext } from 'react';\r\nimport DataBody from '../DataBody';\r\nimport DataAreaContext from '../../utils/DataAreaContext';\r\n\r\nconst DataTable = () => {\r\n    const context = useContext(DataAreaContext);\r\n\r\n    return (\r\n        <div className='dataTable mt-5'>\r\n            <table id='table' className='table table-striped table-hover table-condensed'>\r\n                <thead>\r\n                    <tr>\r\n                        {context.developerState.headings.map(({ name, width }) => {\r\n                            return (\r\n                                <th\r\n                                    className='col'\r\n                                    key={name}\r\n                                    style={{ width }}\r\n                                    onClick={() => {\r\n                                        context.handleSort(name.toLowerCase());\r\n                                    }}>\r\n                                    {name}\r\n                                    <span className='pointer'></span>\r\n                                </th>\r\n                            );\r\n                        })}\r\n                    </tr>\r\n                </thead>\r\n                <DataBody />\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DataTable;","import React, { useContext } from 'react';\r\nimport './Search.css';\r\nimport DataAreaContext from '../../utils/DataAreaContext';\r\n\r\nconst Search = () => {\r\n    const context = useContext(DataAreaContext)\r\n\r\n    return (\r\n        <div className='search'>\r\n            <form className='form-inline'>\r\n                <input\r\n                    className='form-control mr-sm-2'\r\n                    type='search'\r\n                    placeholder='Search'\r\n                    aria-label='Search'\r\n                    onChange={e => context.handleSearch(e)}\r\n                />\r\n                <button className='btn my-2 my-sm-0' type='submit'>\r\n                    Search\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport Search from '../Search';\r\n\r\nconst Nav = () => {\r\n    return (\r\n        <nav className='navbar navbar-expand-lg navbar-light bg-light'>\r\n            <div className='search-area col-4'>\r\n                <Search />\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;","import axios from \"axios\";\r\n\r\nexport default {\r\n  getUsers: function () {\r\n    return axios.get(\"https://randomuser.me/api/?results=100&nat=us\");\r\n  },\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport DataTable from '../DataTable';\r\nimport Nav from '../Nav';\r\nimport DataAreaContext from '../../utils/DataAreaContext';\r\nimport API from '../../utils/API';\r\n\r\nconst DataArea = () => {\r\n    const [developerState, setDeveloperState] = useState({\r\n        users: [],\r\n        order: 'ascend',\r\n        filterUsers: [],\r\n        headings: [\r\n            { name: 'Image', width: '20%', },\r\n            { name: 'Name', width: '20%', },\r\n            { name: 'Phone', width: '20%', },\r\n            { name: 'Email', width: '20%', },\r\n            { name: 'DOB', width: '20%', }\r\n        ]\r\n    });\r\n\r\n    const handleSort = heading => {\r\n        if (developerState.order === 'descend') {\r\n            setDeveloperState({\r\n                order: 'ascend'\r\n            })\r\n        } else {\r\n            setDeveloperState({\r\n                order: 'descend'\r\n            })\r\n        }\r\n        const compare = (x, y) => {\r\n            if (developerState.order === 'ascend') {\r\n                if (x[heading] === undefined) {\r\n                    return 1;\r\n                } else if (y[heading] === undefined) {\r\n                    return -1;\r\n                } else if (heading === 'name') {\r\n                    return x[heading].first.localeCompare(y[heading].first);\r\n                } else {\r\n                    return y[heading] - x[heading];\r\n                }\r\n            } else {\r\n                if (x[heading] === undefined) {\r\n                    return 1;\r\n                } else if (y[heading] === undefined) {\r\n                    return -1;\r\n                } else if (heading === 'name') {\r\n                    return y[heading].first.localeCompare(x[heading].first);\r\n                } else {\r\n                    return y[heading] - x[heading];\r\n                }\r\n            }\r\n        }\r\n\r\n        const userSort = developerState.filterUsers.sort(compare);\r\n\r\n        setDeveloperState({\r\n            ...developerState,\r\n            filterUsers: userSort\r\n        });\r\n    };\r\n\r\n    const handleSearch = event => {\r\n        const filter = event.target.value;\r\n        const filterList = developerState.users.filter(item => {\r\n            let values = item.name.first.toLowerCase();\r\n            return values.indexOf(filter.toLowerCase()) !== -1;\r\n        });\r\n\r\n        setDeveloperState({\r\n            ...developerState,\r\n            filterUsers: filterList\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        API.getUsers().then(results => {\r\n            setDeveloperState({\r\n                ...developerState,\r\n                users: results.data.results,\r\n                filterUsers: results.data.results\r\n            });\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <DataAreaContext.Provider\r\n            value={{ developerState, handleSearch, handleSort }}>\r\n            <Nav />\r\n            <div className='data-area'>\r\n                {developerState.filterUsers.length > 0 ? <DataTable /> : <div></div>}\r\n            </div>\r\n        </DataAreaContext.Provider>\r\n    );\r\n}\r\n\r\nexport default DataArea","import React from 'react';\r\nimport DataArea from '../DataArea/index.js';\r\n\r\nconst Main = () => {\r\n    return (\r\n        <>\r\n            <DataArea />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\n\r\nconst Wrapper = ({ children }) => {\r\n    return (\r\n        <div className='wrapper'>\r\n            { children }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Wrapper;","import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className='header'>\r\n            <h1>Employee Directory</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\nimport Main from './components/Main';\nimport Wrapper from './components/Wrapper';\nimport Header from './components/Header'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrapper>\n        <Header />\n        <Main />\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}